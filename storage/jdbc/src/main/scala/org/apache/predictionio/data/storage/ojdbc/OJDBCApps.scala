/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.apache.predictionio.data.storage.ojdbc

import grizzled.slf4j.Logging
import org.apache.predictionio.data.storage.App
import org.apache.predictionio.data.storage.Apps
import org.apache.predictionio.data.storage.StorageClientConfig
import org.apache.predictionio.data.storage.jdbc.{JDBCApps, JDBCUtils}
import scalikejdbc._

/** JDBC implementation of [[Apps]] */
class OJDBCApps(client: String, config: StorageClientConfig, prefix: String)
  extends JDBCApps(client, config, prefix) {
  override def init() = {
    val sql =
      s"""
    create table ${tableName.value} (
      id integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL PRIMARY KEY,
      name varchar2(4096) not null,
      description varchar2(4096))"""
    DB autoCommit { implicit session =>
      SQL(JDBCUtils.ifnotcreate(client, sql)).execute.apply()
    }
  }

  override def insert(app: App): Option[Int] = DB localTx { implicit session =>
    val q = if (app.id == 0) {
      sql"""
      insert into $tableName (name, description) values(${app.name}, ${app.description})
      """
    } else {
      sql"""
      insert into $tableName values(${app.id}, ${app.name}, ${app.description})
      """
    }
    q.update().apply()
    sql"""
          select id from $tableName where name = ${app.name}
          """.map(rs =>
      rs.int("id")).single().apply()
  }
}
