/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.apache.predictionio.data.storage.ojdbc

import grizzled.slf4j.Logging
import org.apache.predictionio.data.storage.Channel
import org.apache.predictionio.data.storage.Channels
import org.apache.predictionio.data.storage.StorageClientConfig
import scalikejdbc._

/** JDBC implementation of [[Channels]] */
class OJDBCChannels(client: String, config: StorageClientConfig, prefix: String)
  extends Channels with Logging {
  /** Database table name for this data access object */
  val tableName = OJDBCUtils.prefixTableName(prefix, "channels")
  var createsql =
    s"""
    create table ${tableName.value} (
      id integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL PRIMARY KEY,
      name varchar2(4096) not null,
      appid integer not null)"""

  var ifnotcreate =
    s"""
        declare
        error_code NUMBER;
        begin
        EXECUTE IMMEDIATE '$createsql';
        exception
        when others then
          if(SQLCODE = -955) then
                        NULL;
          else
                        RAISE;
          end if;
        end;
          """

  DB autoCommit { implicit session =>
    SQL(ifnotcreate).execute().apply()
  }

  def insert(channel: Channel): Option[Int] = DB localTx { implicit session =>
    val q = if (channel.id == 0) {
      sql"INSERT INTO $tableName (name, appid) VALUES(${channel.name}, ${channel.appid})"
    } else {
      sql"INSERT INTO $tableName VALUES(${channel.id}, ${channel.name}, ${channel.appid})"
    }
    q.update().apply()
    sql"""
          select id from $tableName where appid = ${channel.appid}
          """.map(rs =>
      rs.int("id")).single().apply()
  }

  def get(id: Int): Option[Channel] = DB localTx { implicit session =>
    sql"SELECT id, name, appid FROM $tableName WHERE id = $id".
      map(resultToChannel).single().apply()
  }

  def getByAppid(appid: Int): Seq[Channel] = DB localTx { implicit session =>
    sql"SELECT id, name, appid FROM $tableName WHERE appid = $appid".
      map(resultToChannel).list().apply()
  }

  def delete(id: Int): Unit = DB localTx { implicit session =>
    sql"DELETE FROM $tableName WHERE id = $id".update().apply()
  }

  def resultToChannel(rs: WrappedResultSet): Channel = {
    Channel(
      id = rs.int("id"),
      name = rs.string("name"),
      appid = rs.int("appid"))
  }
}
